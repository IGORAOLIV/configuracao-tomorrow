- Conceitos Gerencia de Software -
  1 - Software Configuration Management (SCM):
    É o processo de controlar e rastrear mudanças em software durante todo o seu ciclo de vida. Ele envolve práticas como versionamento de código, gestão de mudanças e auditorias para garantir que todas as modificações sejam documentadas e aprovadas. O objetivo é manter a integridade e a consistência do software, evitando conflitos e garantindo que todos os envolvidos trabalhem com as versões corretas.
  2 - Controle de Mudanças:
    É o processo de gerenciar, documentar e aprovar alterações em projetos, produtos ou sistemas. Ele garante que qualquer modificação seja analisada quanto ao impacto, aprovada por partes interessadas e implementada de forma controlada, evitando problemas como falhas ou inconsistências. O objetivo é manter a qualidade e a estabilidade, minimizando riscos durante o ciclo de vida do projeto.
  3 - Issue Tracking:
   É o processo de registrar, monitorar e gerenciar problemas, bugs ou solicitações de melhorias em um projeto, geralmente usando uma ferramenta dedicada. Cada issue é documentada com detalhes sobre sua natureza, prioridade e estado (como aberto, em progresso ou resolvido), permitindo que a equipe acompanhe o progresso e resolva problemas de forma eficiente. O objetivo é melhorar a qualidade do produto e facilitar a comunicação entre desenvolvedores e stakeholders. 
  4 - Milestones:
    São pontos-chave em um projeto que indicam o cumprimento de etapas importantes ou prazos significativos. Eles funcionam como marcos para medir o progresso, sinalizando a conclusão de fases específicas, como o término de um desenvolvimento, teste ou revisão. Embora não representem tarefas em si, são indicadores de metas atingidas e ajudam a manter o cronograma e o planejamento do projeto sob controle.
  5 - Controle de Versão:
    É a prática de gerenciar e registrar mudanças em arquivos de software ao longo do tempo. Ele permite que várias versões de um arquivo sejam salvas, comparadas, e revertidas, se necessário. Ferramentas de controle de versão, como Git, facilitam o trabalho colaborativo, permitindo que múltiplos desenvolvedores trabalhem simultaneamente no mesmo projeto, mantendo um histórico claro das modificações e evitando conflitos de código.
  6 - Diretório de Trabalho:
    É a pasta ou local no sistema de arquivos onde um usuário está atualmente operando. Em ferramentas de controle de versão, como Git, o diretório de trabalho é o espaço em que os arquivos do projeto estão localizados e onde o desenvolvedor faz modificações. É a área em que o código pode ser editado antes de ser preparado para commit, comparação ou atualização com o repositório.
  7 - Repositório:
    É um local onde o código-fonte de um projeto e seus arquivos associados são armazenados e gerenciados. Em sistemas de controle de versão, como Git, o repositório mantém o histórico completo das alterações feitas no projeto, incluindo commits, branches e versões anteriores, permitindo colaboração, rastreamento de mudanças e recuperação de versões anteriores. Ele pode ser local (no computador do desenvolvedor) ou remoto (hospedado em plataformas como GitHub ou GitLab).
  8 - Histórico de Versão:
    É o registro completo de todas as alterações feitas em um projeto ao longo do tempo. Em sistemas de controle de versão, cada modificação, como adição, exclusão ou atualização de arquivos, é documentada com um commit, que inclui informações como autor, data e descrição das mudanças. Esse histórico permite rastrear a evolução do projeto, reverter para versões anteriores e entender o contexto das modificações feitas, facilitando a colaboração e a manutenção do software.
  9 - Versionamento:
    É o processo de atribuir números ou rótulos a diferentes estados de um software à medida que ele evolui. Cada versão indica uma etapa de desenvolvimento ou uma alteração significativa no código, como novas funcionalidades, correções de bugs ou melhorias. O versionamento permite que equipes de desenvolvimento gerenciem múltiplas versões de um projeto de forma organizada, facilitando o rastreamento de alterações, o trabalho colaborativo e a distribuição de versões estáveis aos usuários.
  10 - Git:
    Git é um sistema de controle de versão distribuído que permite gerenciar e rastrear alterações em projetos de software. Ele facilita o trabalho colaborativo, permitindo que múltiplos desenvolvedores trabalhem no mesmo código ao mesmo tempo, sem conflitos. Git armazena um histórico completo de todas as modificações, possibilita a criação de branches (ramificações) para diferentes funcionalidades e oferece ferramentas para combinar, reverter ou comparar mudanças de forma eficiente. É amplamente utilizado em plataformas como GitHub e GitLab.
  11 - GitHub:
    É uma plataforma de hospedagem de código que utiliza o sistema de controle de versão Git. Ela permite que desenvolvedores armazenem, compartilhem e colaborem em projetos de software. O GitHub oferece recursos como controle de versão, gerenciamento de issues, revisão de código e integração contínua. Além disso, permite que os usuários publiquem projetos de código aberto e colaborem com outros desenvolvedores ao redor do mundo, facilitando a criação e manutenção de softwares em equipe.
  12 - Commit:
    Commit é uma ação no controle de versão que registra um conjunto específico de alterações feitas no código-fonte de um projeto. Cada commit inclui uma mensagem descritiva que explica as modificações, além de informações como o autor e a data da alteração. Os commits permitem que os desenvolvedores criem um histórico de mudanças, possibilitando reverter para versões anteriores, comparar diferentes estados do projeto e entender a evolução do código ao longo do tempo.
  13 - Git Clone:
    Git Clone é um comando do Git usado para criar uma cópia local de um repositório remoto. Ao executar esse comando, todos os arquivos, histórico de versões e branches do repositório são transferidos para o computador do usuário. Isso permite que o desenvolvedor trabalhe offline, faça alterações e, posteriormente, envie suas contribuições de volta ao repositório remoto por meio de comandos como commit e push. O clone é a primeira etapa para começar a colaborar em projetos hospedados em plataformas como GitHub.
  14 - Branch:
    Branch (ou ramificação) é um recurso no Git que permite criar uma linha paralela de desenvolvimento dentro de um repositório. Cada branch pode ser usado para desenvolver novas funcionalidades, corrigir bugs ou experimentar alterações sem afetar a versão principal do código, geralmente chamada de "main" ou "master". Isso facilita o trabalho colaborativo, pois diferentes desenvolvedores podem trabalhar em suas próprias branches simultaneamente, e as alterações podem ser mescladas de volta à branch principal quando estiverem prontas, mantendo o código organizado e estável.
  15 - Merge:
    Merge é o processo de integrar as alterações de uma branch em outra no Git. Quando um desenvolvedor conclui o trabalho em uma branch (por exemplo, uma nova funcionalidade), ele pode usar o comando de merge para combinar essas alterações na branch principal (como "main" ou "master"). O merge cria um novo commit que incorpora todas as mudanças da branch de origem, mantendo o histórico de ambas as branches. Caso haja conflitos (modificações incompatíveis em áreas do código), o Git solicitará que o usuário resolva esses conflitos manualmente antes de concluir o merge.
  16 - Rebase:
    Rebase é um processo no Git que permite mover ou combinar uma sequência de commits de uma branch para outra, reescrevendo o histórico de commits. Ao fazer rebase, você "aplica" os commits da branch de origem no topo da branch de destino, criando um histórico linear e limpo. Isso é útil para manter um registro de mudanças mais claro e para facilitar a integração de novas funcionalidades, pois evita a complexidade que pode surgir com merges múltiplos. No entanto, é importante ter cuidado ao usar rebase em branches compartilhadas, pois reescrever o histórico pode causar problemas para outros colaboradores.
  17 - Workflows:
    Workflows são conjuntos de práticas e processos que definem como uma equipe de desenvolvimento organiza e gerencia seu trabalho em um projeto.
  18 - Fluxo Centralizado:
    Fluxo centralizado é um modelo de trabalho em controle de versão onde todos os desenvolvedores colaboram em uma única branch principal, geralmente chamada de "master" ou "main". Nesse fluxo, as alterações são feitas diretamente nessa branch e os desenvolvedores realizam commits e pulls frequentes para manter o código atualizado. O fluxo centralizado é simples e fácil de entender, mas pode levar a conflitos e desafios em projetos maiores, onde múltiplas mudanças são feitas simultaneamente. É mais adequado para equipes pequenas ou projetos com menos complexidade.
  19 - Fluxo com feature branches:
    Fluxo com feature branches é um modelo de trabalho em controle de versão onde os desenvolvedores criam branches separadas para trabalhar em novas funcionalidades ou correções de bugs. Cada branch de funcionalidade é dedicada a uma tarefa específica e é criada a partir da branch principal (como "main" ou "master"). Os desenvolvedores realizam alterações nessa branch e, uma vez que a funcionalidade está concluída e testada, a branch é mesclada de volta à branch principal. Esse fluxo melhora a organização do código, minimiza conflitos e permite que várias funcionalidades sejam desenvolvidas simultaneamente, facilitando a colaboração em equipe.
  